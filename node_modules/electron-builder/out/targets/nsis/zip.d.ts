/// <reference types="node" />
import { EventEmitter } from "events";
export interface ZipOptions {
    decodeStrings?: boolean;
    validateEntrySizes?: boolean;
    ignoreComments?: boolean;
}
export declare function openZip(file: string, options?: ZipOptions | null): Promise<ZipFile>;
export declare class ZipFile extends EventEmitter {
    readonly fd: number;
    readonly centralDirectorySize: number;
    readonly centralDirectoryOffset: number;
    readonly fileSize: number;
    readonly entryCount: number;
    readonly comment: any;
    readonly options: ZipOptions;
    private readEntryCursor;
    private isOpen;
    constructor(fd: number, centralDirectorySize: number, centralDirectoryOffset: number, fileSize: number, entryCount: number, comment: any, options: ZipOptions);
    readEntries(): Promise<Entry[]>;
    close(): Promise<void>;
    private readEntry(buffer);
    getDataPosition(entry: Entry): Promise<EntryDataRange>;
}
export interface EntryDataRange {
    start: number;
    end: number;
}
export declare class Entry {
    compressionMethod: number;
    generalPurposeBitFlag: number;
    lastModFileDate: number;
    lastModFileTime: number;
    versionMadeBy: number;
    versionNeededToExtract: number;
    crc32: number;
    fileName: string | Buffer;
    fileComment: string | Buffer;
    compressedSize: number;
    uncompressedSize: number;
    fileNameLength: number;
    extraFieldLength: number;
    fileCommentLength: number;
    internalFileAttributes: number;
    externalFileAttributes: number;
    relativeOffsetOfLocalHeader: number;
    extraFields: Array<any>;
    readonly isEncrypted: boolean;
    readonly isCompressed: boolean;
}
